name: agent-lite

on:
  workflow_dispatch:
    inputs:
      task:
        description: "Describe the next small task (optional; defaults to ROADMAP.md first unchecked item)"
        required: false
        type: string
  pull_request:
    branches: [ main ]

permissions:
  contents: write
  pull-requests: write

concurrency:
  group: pr-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  run:
    if: ${{ github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # âœ… MOVE THIS UP: set author before any commits happen
      - name: Configure Git author
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install pnpm (global)
        run: npm i -g pnpm@9.12.0

      - name: Verify pnpm
        run: pnpm --version

      - name: Install deps
        run: pnpm install --frozen-lockfile=false

      - name: Doctor
        run: pnpm -s agent:doctor || { echo "doctor failed (stub or actionable)"; exit 1; }

      - name: Build context
        run: pnpm agent:context

      - name: Plan step
        run: pnpm agent:plan
        env:
          AGENT_TASK: ${{ github.event.inputs.task }}

      - name: Implement step (branch + seed)
        run: pnpm agent:impl

      - name: Run checks (typecheck, lint, unit tests)
        run: pnpm agent:check

      - name: Get branch name
        id: br
        run: echo "branch=$(git rev-parse --abbrev-ref HEAD)" >> "$GITHUB_OUTPUT"

      - name: Push branch
        run: git push --set-upstream origin "${{ steps.br.outputs.branch }}"

      - name: Read plan meta
        id: planmeta
        run: |
          echo "id=$(node -e \"process.stdout.write(JSON.parse(require('fs').readFileSync('.agent/plan.json','utf8')).chosen.id)\")" >> $GITHUB_OUTPUT
          echo "title=$(node -e \"process.stdout.write(JSON.parse(require('fs').readFileSync('.agent/plan.json','utf8')).chosen.title)\")" >> $GITHUB_OUTPUT

      - name: Create Pull Request
        id: create-pr
        uses: actions/github-script@v7
        env:
          BRANCH: ${{ steps.br.outputs.branch }}
          TITLE: ${{ steps.planmeta.outputs.title }}
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const head = process.env.BRANCH;
            const base = 'main';
            const title = `Agent Lite: ${process.env.TITLE || head}`;
            const body = 'Automated agent step (plan/implement/check). Review carefully.';

            const { data: prs } = await github.rest.pulls.list({
              owner, repo, state: 'open', head: `${owner}:${head}`,
            });
            if (prs.length) {
              core.setOutput('url', prs[0].html_url);
            } else {
              const { data: pr } = await github.rest.pulls.create({
                owner, repo, head, base, title, body
              });
              core.setOutput('url', pr.html_url);
            }

      - name: PR link
        run: echo "PR opened:${{ steps.create-pr.outputs.url }}"

  check:
    if: ${{ github.event_name == 'pull_request' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install pnpm (global)
        run: npm i -g pnpm@9.12.0

      - name: Verify pnpm
        run: pnpm --version

      - name: Install deps
        run: pnpm install --frozen-lockfile=false

      - name: Agent check (typecheck + lint(agent) + build context + unit tests + validate)
        run: pnpm agent:check
